{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://form-auto-filler/./src/components/popup/ActionPanel.tsx","webpack://form-auto-filler/./src/components/popup/DataPreview.tsx","webpack://form-auto-filler/./src/components/popup/DataSourceInput.tsx","webpack://form-auto-filler/./src/components/popup/PopupApp.tsx","webpack://form-auto-filler/./src/components/popup/StatusPanel.tsx","webpack://form-auto-filler/./src/components/popup/index.tsx","webpack://form-auto-filler/./src/lib/dataFetcher.ts","webpack://form-auto-filler/./src/lib/storageManager.ts","webpack://form-auto-filler/webpack/bootstrap","webpack://form-auto-filler/webpack/runtime/chunk loaded","webpack://form-auto-filler/webpack/runtime/compat get default export","webpack://form-auto-filler/webpack/runtime/define property getters","webpack://form-auto-filler/webpack/runtime/global","webpack://form-auto-filler/webpack/runtime/hasOwnProperty shorthand","webpack://form-auto-filler/webpack/runtime/make namespace object","webpack://form-auto-filler/webpack/runtime/node module decorator","webpack://form-auto-filler/webpack/runtime/jsonp chunk loading","webpack://form-auto-filler/webpack/before-startup","webpack://form-auto-filler/webpack/startup","webpack://form-auto-filler/webpack/after-startup"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Box, Button } from '@mui/material';\nimport { AutoFixHigh, Refresh } from '@mui/icons-material';\nexport const ActionPanel = ({ onFill, onRefresh, disabled = false }) => {\n    return (_jsxs(Box, { sx: { display: 'flex', gap: 1 }, children: [_jsx(Button, { variant: \"contained\", startIcon: _jsx(AutoFixHigh, {}), onClick: onFill, disabled: disabled, fullWidth: true, children: \"Auto Fill\" }), _jsx(Button, { variant: \"outlined\", startIcon: _jsx(Refresh, {}), onClick: onRefresh, disabled: disabled, children: \"Refresh\" })] }));\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, } from '@mui/material';\nexport const DataPreview = ({ data }) => {\n    if (!data.fields || data.fields.length === 0) {\n        return (_jsx(Paper, { sx: { p: 2, mb: 2 }, children: _jsx(Typography, { children: \"No form data available\" }) }));\n    }\n    return (_jsx(Paper, { sx: { mb: 2 }, children: _jsx(TableContainer, { children: _jsxs(Table, { size: \"small\", children: [_jsx(TableHead, { children: _jsxs(TableRow, { children: [_jsx(TableCell, { children: \"Field Name\" }), _jsx(TableCell, { children: \"Type\" }), _jsx(TableCell, { children: \"Value\" })] }) }), _jsx(TableBody, { children: data.fields.map((field, index) => (_jsxs(TableRow, { children: [_jsx(TableCell, { children: field.name || field.label || 'Unnamed Field' }), _jsx(TableCell, { children: field.type }), _jsx(TableCell, { children: field.type === 'select' && field.options ? (_jsxs(Box, { component: \"span\", sx: { color: 'text.secondary' }, children: [field.value, \" (Options: \", field.options.join(', '), \")\"] })) : (field.value || _jsx(Box, { component: \"span\", sx: { color: 'text.disabled' }, children: \"Empty\" })) })] }, field.id || index))) })] }) }) }));\n};\nexport default DataPreview;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useRef } from 'react';\nimport { Box, TextField, Button, Select, MenuItem, FormControl, InputLabel, Typography, Paper, } from '@mui/material';\nexport const DataSourceInput = ({ onSubmit }) => {\n    var _a, _b;\n    const [sourceType, setSourceType] = useState('api');\n    const [apiEndpoint, setApiEndpoint] = useState('');\n    const [apiKey, setApiKey] = useState('');\n    const [textContent, setTextContent] = useState('');\n    const fileInputRef = useRef(null);\n    const handleSubmit = (e) => {\n        var _a, _b;\n        e.preventDefault();\n        if (sourceType === 'api') {\n            onSubmit({\n                type: 'api',\n                endpoint: apiEndpoint,\n                authToken: apiKey,\n            });\n        }\n        else if (sourceType === 'text') {\n            onSubmit({\n                type: 'text',\n                content: textContent,\n            });\n        }\n        else if ((_b = (_a = fileInputRef.current) === null || _a === void 0 ? void 0 : _a.files) === null || _b === void 0 ? void 0 : _b[0]) {\n            const file = fileInputRef.current.files[0];\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                var _a;\n                if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.result) instanceof ArrayBuffer) {\n                    onSubmit({\n                        type: file.type.includes('pdf') ? 'pdf' : 'file',\n                        fileName: file.name,\n                        fileData: e.target.result,\n                        mimeType: file.type,\n                    });\n                }\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    };\n    return (_jsx(Paper, { sx: { p: 2, mb: 2 }, children: _jsxs(\"form\", { onSubmit: handleSubmit, children: [_jsxs(FormControl, { fullWidth: true, sx: { mb: 2 }, children: [_jsx(InputLabel, { children: \"Data Source Type\" }), _jsxs(Select, { value: sourceType, label: \"Data Source Type\", onChange: (e) => setSourceType(e.target.value), children: [_jsx(MenuItem, { value: \"api\", children: \"API\" }), _jsx(MenuItem, { value: \"file\", children: \"File Upload\" }), _jsx(MenuItem, { value: \"text\", children: \"Text Input\" }), _jsx(MenuItem, { value: \"pdf\", children: \"PDF Document\" })] })] }), sourceType === 'api' ? (_jsxs(_Fragment, { children: [_jsx(TextField, { fullWidth: true, label: \"API Endpoint\", value: apiEndpoint, onChange: (e) => setApiEndpoint(e.target.value), sx: { mb: 2 }, required: true }), _jsx(TextField, { fullWidth: true, label: \"API Key (Optional)\", value: apiKey, onChange: (e) => setApiKey(e.target.value), type: \"password\", sx: { mb: 2 } })] })) : sourceType === 'text' ? (_jsx(TextField, { fullWidth: true, label: \"Data Content\", value: textContent, onChange: (e) => setTextContent(e.target.value), multiline: true, rows: 4, sx: { mb: 2 }, required: true })) : (_jsxs(Box, { sx: { mb: 2 }, children: [_jsx(\"input\", { type: \"file\", ref: fileInputRef, accept: sourceType === 'pdf' ? '.pdf' : '.json,.csv', style: { display: 'none' }, onChange: (e) => {\n                                var _a;\n                                const file = (_a = e.target.files) === null || _a === void 0 ? void 0 : _a[0];\n                                if (file) {\n                                    const reader = new FileReader();\n                                    reader.onload = (e) => {\n                                        var _a;\n                                        if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.result) instanceof ArrayBuffer) {\n                                            onSubmit({\n                                                type: file.type.includes('pdf') ? 'pdf' : 'file',\n                                                fileName: file.name,\n                                                fileData: e.target.result,\n                                                mimeType: file.type,\n                                            });\n                                        }\n                                    };\n                                    reader.readAsArrayBuffer(file);\n                                }\n                            } }), _jsxs(Button, { variant: \"outlined\", onClick: () => { var _a; return (_a = fileInputRef.current) === null || _a === void 0 ? void 0 : _a.click(); }, fullWidth: true, children: [\"Choose \", sourceType === 'pdf' ? 'PDF' : 'File'] }), ((_b = (_a = fileInputRef.current) === null || _a === void 0 ? void 0 : _a.files) === null || _b === void 0 ? void 0 : _b[0]) && (_jsxs(Typography, { variant: \"body2\", sx: { mt: 1 }, children: [\"Selected file: \", fileInputRef.current.files[0].name] }))] })), (sourceType === 'api' || sourceType === 'text') && (_jsx(Button, { type: \"submit\", variant: \"contained\", color: \"primary\", fullWidth: true, children: \"Submit\" }))] }) }));\n};\nexport default DataSourceInput;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Box, Container, Alert, CircularProgress } from '@mui/material';\nimport { DataSourceInput } from './DataSourceInput';\nimport { ActionPanel } from './ActionPanel';\nimport { StatusPanel } from './StatusPanel';\nimport { DataPreview } from './DataPreview';\nimport { StorageManager } from '../../lib/storageManager';\nimport { DataFetcher } from '../../lib/dataFetcher';\nconst theme = createTheme({\n    palette: {\n        mode: 'light',\n        primary: {\n            main: '#1976d2',\n        },\n    },\n});\nconst PopupApp = () => {\n    const [state, setState] = useState({\n        loading: false,\n        error: null,\n        data: null,\n        dataSource: null,\n        lastUpdate: null,\n    });\n    const handleDataSourceSubmit = (source) => __awaiter(void 0, void 0, void 0, function* () {\n        setState(prev => (Object.assign(Object.assign({}, prev), { loading: true, error: null })));\n        try {\n            const data = yield DataFetcher.getInstance().fetchData(source);\n            setState(prev => (Object.assign(Object.assign({}, prev), { loading: false, data, dataSource: source, lastUpdate: new Date() })));\n            yield StorageManager.getInstance().saveData({\n                dataSource: source,\n                lastUpdate: Date.now(),\n                formData: data,\n                settings: {\n                    autoFill: true,\n                    fillDelay: 500,\n                },\n                mappings: [],\n            });\n        }\n        catch (error) {\n            setState(prev => (Object.assign(Object.assign({}, prev), { loading: false, error: error instanceof Error ? error.message : 'Unknown error occurred' })));\n        }\n    });\n    const handleFillForm = () => __awaiter(void 0, void 0, void 0, function* () {\n        setState(prev => (Object.assign(Object.assign({}, prev), { loading: true })));\n        try {\n            // Send message to content script\n            const [tab] = yield chrome.tabs.query({ active: true, currentWindow: true });\n            if (tab.id && state.data) {\n                yield chrome.tabs.sendMessage(tab.id, {\n                    type: 'FILL_FORM',\n                    data: state.data.fields\n                });\n            }\n        }\n        catch (error) {\n            setState(prev => (Object.assign(Object.assign({}, prev), { error: error instanceof Error ? error.message : 'Failed to fill form' })));\n        }\n        finally {\n            setState(prev => (Object.assign(Object.assign({}, prev), { loading: false })));\n        }\n    });\n    const handleRefresh = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (state.dataSource) {\n            yield handleDataSourceSubmit(state.dataSource);\n        }\n    });\n    return (_jsxs(ThemeProvider, { theme: theme, children: [_jsx(CssBaseline, {}), _jsxs(Container, { maxWidth: \"sm\", sx: { p: 2 }, children: [_jsx(Box, { sx: { mb: 2 }, children: _jsx(\"h2\", { children: \"Form Auto Filler\" }) }), state.error && (_jsx(Alert, { severity: \"error\", sx: { mb: 2 }, children: state.error })), state.loading ? (_jsx(Box, { sx: { display: 'flex', justifyContent: 'center', p: 3 }, children: _jsx(CircularProgress, {}) })) : (_jsxs(_Fragment, { children: [_jsx(DataSourceInput, { onSubmit: handleDataSourceSubmit }), state.data && (_jsxs(_Fragment, { children: [_jsx(DataPreview, { data: state.data }), _jsx(ActionPanel, { onFill: handleFillForm, onRefresh: handleRefresh, disabled: state.loading })] })), _jsx(StatusPanel, { loading: state.loading, lastUpdate: state.lastUpdate, dataSource: state.dataSource })] }))] })] }));\n};\nexport default PopupApp;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Box, Typography, CircularProgress } from '@mui/material';\nexport const StatusPanel = ({ loading, lastUpdate, dataSource, }) => {\n    const getDataSourceDescription = (source) => {\n        switch (source.type) {\n            case 'api':\n                return `API: ${source.endpoint}`;\n            case 'file':\n                return `File: ${source.fileName}`;\n            case 'text':\n                return 'Text Input';\n            case 'pdf':\n                return `PDF: ${source.fileName}`;\n            default:\n                return 'Unknown Source';\n        }\n    };\n    return (_jsx(Box, { sx: { mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }, children: loading ? (_jsxs(Box, { sx: { display: 'flex', alignItems: 'center', gap: 1 }, children: [_jsx(CircularProgress, { size: 20 }), _jsx(Typography, { variant: \"body2\", children: \"Loading...\" })] })) : (_jsxs(_Fragment, { children: [dataSource && (_jsxs(Typography, { variant: \"body2\", gutterBottom: true, children: [\"Source: \", getDataSourceDescription(dataSource)] })), lastUpdate && (_jsxs(Typography, { variant: \"body2\", color: \"text.secondary\", children: [\"Last updated: \", lastUpdate.toLocaleString()] }))] })) }));\n};\nexport default StatusPanel;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport PopupApp from './PopupApp';\nconst container = document.getElementById('root');\nif (container) {\n    const root = createRoot(container);\n    root.render(_jsx(React.StrictMode, { children: _jsx(PopupApp, {}) }));\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport axios from 'axios';\nimport * as pdfjs from 'pdfjs-dist';\n// Import PDF.js worker\nif (typeof window !== 'undefined' && 'Worker' in window) {\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n}\nexport class DataFetcher {\n    constructor() {\n        this.cache = new Map();\n    }\n    static getInstance() {\n        if (!DataFetcher.instance) {\n            DataFetcher.instance = new DataFetcher();\n        }\n        return DataFetcher.instance;\n    }\n    fetchData(source) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (source.type) {\n                case 'api':\n                    return this.fetchFromApi(source.endpoint || '', source.authToken);\n                case 'file':\n                    if (source.fileData) {\n                        return this.parseFile(source.fileData, source.mimeType || '');\n                    }\n                    throw new Error('No file data provided');\n                case 'text':\n                    if (source.content) {\n                        return this.parseTextContent(source.content);\n                    }\n                    throw new Error('No text content provided');\n                case 'pdf':\n                    if (source.fileData) {\n                        return this.parsePdfContent(source.fileData);\n                    }\n                    throw new Error('No PDF data provided');\n                case 'storage':\n                    if (source.content) {\n                        return this.parseTextContent(source.content);\n                    }\n                    throw new Error('No storage data provided');\n                default:\n                    throw new Error('Unsupported data source type');\n            }\n        });\n    }\n    fetchFromApi(endpoint, authToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const headers = authToken ? { Authorization: `Bearer ${authToken}` } : {};\n                const response = yield axios.get(endpoint, { headers });\n                return response.data;\n            }\n            catch (error) {\n                console.error('Error fetching data from API:', error);\n                throw error;\n            }\n        });\n    }\n    parseFile(fileData, mimeType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (mimeType === 'application/json') {\n                    const text = new TextDecoder().decode(fileData);\n                    return JSON.parse(text);\n                }\n                else if (mimeType === 'text/csv') {\n                    return this.parseCsvContent(new TextDecoder().decode(fileData));\n                }\n                else if (mimeType === 'application/pdf') {\n                    return this.parsePdfContent(fileData);\n                }\n                throw new Error('Unsupported file type');\n            }\n            catch (error) {\n                console.error('Error parsing file:', error);\n                throw error;\n            }\n        });\n    }\n    parseTextContent(content) {\n        try {\n            // Try parsing as JSON first\n            try {\n                return JSON.parse(content);\n            }\n            catch (_a) {\n                // If not JSON, try parsing as CSV\n                return this.parseCsvContent(content);\n            }\n        }\n        catch (error) {\n            console.error('Error parsing text content:', error);\n            throw error;\n        }\n    }\n    parseCsvContent(content) {\n        const lines = content.split('\\n');\n        if (lines.length < 2) {\n            throw new Error('Invalid CSV format');\n        }\n        const headers = lines[0].split(',').map(h => h.trim());\n        const values = lines[1].split(',').map(v => v.trim());\n        const fields = headers.map((header, index) => ({\n            id: `field-${index + 1}`,\n            name: header,\n            type: 'text',\n            value: values[index] || ''\n        }));\n        return { fields };\n    }\n    parsePdfContent(fileData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const pdf = yield pdfjs.getDocument({ data: fileData }).promise;\n                const page = yield pdf.getPage(1);\n                const textContent = yield page.getTextContent();\n                // Extract text content from PDF\n                const text = textContent.items\n                    .map((item) => item.str)\n                    .join(' ');\n                // Try to parse the text as structured data\n                return this.parseTextContent(text);\n            }\n            catch (error) {\n                console.error('Error parsing PDF:', error);\n                throw error;\n            }\n        });\n    }\n    getData(source) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cacheKey = source.type === 'api' ? source.endpoint : 'file';\n            if (this.cache.has(cacheKey)) {\n                return this.cache.get(cacheKey);\n            }\n            let data;\n            data = yield this.fetchData(source);\n            this.cache.set(cacheKey, data);\n            return data;\n        });\n    }\n    clearCache() {\n        this.cache.clear();\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class StorageManager {\n    constructor() { }\n    static getInstance() {\n        if (!StorageManager.instance) {\n            StorageManager.instance = new StorageManager();\n        }\n        return StorageManager.instance;\n    }\n    saveData(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                chrome.storage.local.set(data, () => {\n                    if (chrome.runtime.lastError) {\n                        reject(chrome.runtime.lastError);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n    getData(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                chrome.storage.local.get(key, (result) => {\n                    if (chrome.runtime.lastError) {\n                        reject(chrome.runtime.lastError);\n                    }\n                    else {\n                        resolve(result[key]);\n                    }\n                });\n            });\n        });\n    }\n    clearData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                chrome.storage.local.clear(() => {\n                    if (chrome.runtime.lastError) {\n                        reject(chrome.runtime.lastError);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"popup\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkform_auto_filler\"] = self[\"webpackChunkform_auto_filler\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors\"], () => (__webpack_require__(\"./src/components/popup/index.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}