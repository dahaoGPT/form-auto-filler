{"version":3,"file":"content.js","mappings":";;;;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvsources":["webpack://form-auto-filler/./src/styles/content.css","webpack://form-auto-filler/webpack/bootstrap","webpack://form-auto-filler/webpack/runtime/make namespace object","webpack://form-auto-filler/./src/content.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport './styles/content.css';\nclass FormFiller {\n    constructor() {\n        this.dialog = null;\n        this.overlay = null;\n        this.notification = null;\n        this.pendingChanges = new Map();\n        this.icon = null;\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initializeIcon());\n        }\n        else {\n            this.initializeIcon();\n        }\n    }\n    static getInstance() {\n        if (!FormFiller.instance) {\n            FormFiller.instance = new FormFiller();\n        }\n        return FormFiller.instance;\n    }\n    initializeIcon() {\n        var _a;\n        // Remove existing icon if any\n        (_a = this.icon) === null || _a === void 0 ? void 0 : _a.remove();\n        // Create new icon\n        this.icon = document.createElement('div');\n        this.icon.className = 'form-filler-icon';\n        this.icon.innerHTML = '✏️';\n        this.icon.title = '点击打开表单填充器';\n        this.icon.addEventListener('click', () => this.showDialog());\n        // Add to document\n        document.body.appendChild(this.icon);\n        // Ensure icon stays on top\n        this.observeBodyChanges();\n    }\n    observeBodyChanges() {\n        const observer = new MutationObserver(() => {\n            if (!document.body.contains(this.icon) && this.icon) {\n                document.body.appendChild(this.icon);\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n    showDialog() {\n        // Create overlay\n        this.overlay = document.createElement('div');\n        this.overlay.className = 'form-filler-overlay';\n        this.overlay.addEventListener('click', () => this.hideDialog());\n        // Create dialog\n        this.dialog = document.createElement('div');\n        this.dialog.className = 'form-filler-dialog';\n        this.dialog.addEventListener('click', (e) => e.stopPropagation());\n        // Create content\n        const title = document.createElement('h3');\n        title.textContent = '表单填充器';\n        title.style.margin = '0 0 15px 0';\n        const input = document.createElement('textarea');\n        input.className = 'form-filler-input';\n        input.placeholder = '输入要填充的文本内容...\\n例如：\\n姓名: 张三\\n年龄: 25';\n        input.rows = 5;\n        const fillButton = document.createElement('button');\n        fillButton.className = 'form-filler-button';\n        fillButton.textContent = '填充表单';\n        fillButton.addEventListener('click', () => this.handleFill(input.value));\n        const cancelButton = document.createElement('button');\n        cancelButton.className = 'form-filler-button secondary';\n        cancelButton.textContent = '取消';\n        cancelButton.addEventListener('click', () => this.hideDialog());\n        const closeButton = document.createElement('span');\n        closeButton.className = 'form-filler-close';\n        closeButton.innerHTML = '×';\n        closeButton.addEventListener('click', () => this.hideDialog());\n        // Assemble dialog\n        this.dialog.appendChild(closeButton);\n        this.dialog.appendChild(title);\n        this.dialog.appendChild(input);\n        this.dialog.appendChild(document.createElement('br'));\n        this.dialog.appendChild(fillButton);\n        this.dialog.appendChild(cancelButton);\n        // Add to document\n        document.body.appendChild(this.overlay);\n        document.body.appendChild(this.dialog);\n        // Focus input\n        input.focus();\n    }\n    hideDialog() {\n        var _a, _b;\n        (_a = this.overlay) === null || _a === void 0 ? void 0 : _a.remove();\n        (_b = this.dialog) === null || _b === void 0 ? void 0 : _b.remove();\n        this.overlay = null;\n        this.dialog = null;\n    }\n    handleFill(content) {\n        this.hideDialog();\n        const fields = this.findFormFields();\n        // Try to match content with form fields\n        fields.forEach(field => {\n            const value = this.findMatchingValue(field.element, content);\n            if (value && value !== field.element.value) {\n                this.pendingChanges.set(field.element, {\n                    element: field.element,\n                    value,\n                    originalValue: field.element.value\n                });\n            }\n        });\n        if (this.pendingChanges.size > 0) {\n            this.showNotification();\n        }\n    }\n    findFormFields() {\n        const fields = [];\n        const inputs = document.querySelectorAll('input[type=\"text\"], textarea');\n        inputs.forEach(input => {\n            if (input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement) {\n                fields.push({\n                    element: input,\n                    value: input.value,\n                    originalValue: input.value\n                });\n            }\n        });\n        return fields;\n    }\n    findMatchingValue(element, content) {\n        var _a;\n        // Try to find a line that matches the field's label or placeholder\n        const label = this.findFieldLabel(element);\n        if (!label)\n            return null;\n        const lines = content.split('\\n');\n        for (const line of lines) {\n            if (line.toLowerCase().includes(label.toLowerCase())) {\n                const value = (_a = line.split(':')[1]) === null || _a === void 0 ? void 0 : _a.trim();\n                if (value)\n                    return value;\n            }\n        }\n        return null;\n    }\n    findFieldLabel(element) {\n        var _a, _b;\n        // Try to find label by for attribute\n        const id = element.getAttribute('id');\n        if (id) {\n            const label = document.querySelector(`label[for=\"${id}\"]`);\n            if (label)\n                return ((_a = label.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || null;\n        }\n        // Try to find label by proximity\n        const parent = element.parentElement;\n        if (parent) {\n            const label = parent.querySelector('label');\n            if (label)\n                return ((_b = label.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || null;\n        }\n        // Try placeholder or aria-label\n        return element.getAttribute('placeholder') ||\n            element.getAttribute('aria-label') ||\n            null;\n    }\n    showNotification() {\n        // Create notification\n        this.notification = document.createElement('div');\n        this.notification.className = 'form-filler-notification';\n        const title = document.createElement('h4');\n        title.textContent = '发现可填充的内容';\n        title.style.margin = '0 0 10px 0';\n        const message = document.createElement('div');\n        message.textContent = `找到 ${this.pendingChanges.size} 个可以填充的字段。`;\n        const buttonContainer = document.createElement('div');\n        buttonContainer.className = 'form-filler-notification-buttons';\n        const acceptButton = document.createElement('button');\n        acceptButton.className = 'form-filler-button';\n        acceptButton.textContent = '接受';\n        acceptButton.addEventListener('click', () => this.applyChanges());\n        const rejectButton = document.createElement('button');\n        rejectButton.className = 'form-filler-button secondary';\n        rejectButton.textContent = '放弃';\n        rejectButton.addEventListener('click', () => this.hideNotification());\n        buttonContainer.appendChild(acceptButton);\n        buttonContainer.appendChild(rejectButton);\n        this.notification.appendChild(title);\n        this.notification.appendChild(message);\n        this.notification.appendChild(buttonContainer);\n        document.body.appendChild(this.notification);\n    }\n    hideNotification() {\n        var _a;\n        (_a = this.notification) === null || _a === void 0 ? void 0 : _a.remove();\n        this.notification = null;\n        this.pendingChanges.clear();\n    }\n    applyChanges() {\n        this.pendingChanges.forEach(field => {\n            field.element.value = field.value;\n            field.element.dispatchEvent(new Event('input', { bubbles: true }));\n            field.element.dispatchEvent(new Event('change', { bubbles: true }));\n        });\n        this.hideNotification();\n    }\n}\n// Initialize form filler\nconst formFiller = FormFiller.getInstance();\n// Re-initialize when content script is injected\nif (document.readyState === 'complete') {\n    formFiller.initializeIcon();\n}\n// 监听来自扩展的消息\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'TAB_UPDATED') {\n        // 检查是否是腾讯问卷页面\n        if (window.location.href.includes('wj.qq.com')) {\n            // 等待表单加载完成\n            waitForForm().then(() => {\n                console.log('Form detected on page');\n                // 通知扩展表单已准备就绪\n                chrome.runtime.sendMessage({\n                    type: 'FORM_READY',\n                    url: window.location.href\n                });\n            });\n        }\n    }\n    else if (message.type === 'FILL_FORM') {\n        fillForm(message.data);\n    }\n});\n// 等待表单元素加载\nfunction waitForForm() {\n    return new Promise((resolve) => {\n        const checkForm = () => {\n            const form = document.querySelector('.question-wrapper');\n            if (form) {\n                resolve();\n            }\n            else {\n                setTimeout(checkForm, 500);\n            }\n        };\n        checkForm();\n    });\n}\n// 填写表单\nfunction fillForm(formData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // 等待表单加载\n            yield waitForForm();\n            // 获取所有问题容器\n            const questions = document.querySelectorAll('.question-wrapper');\n            questions.forEach((question) => {\n                var _a;\n                // 获取问题标题\n                const titleElement = question.querySelector('.question-title');\n                if (!titleElement)\n                    return;\n                const title = ((_a = titleElement.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n                if (!title || !formData[title])\n                    return;\n                const value = formData[title];\n                // 处理不同类型的问题\n                // 单选题\n                const radioInputs = question.querySelectorAll('input[type=\"radio\"]');\n                if (radioInputs.length > 0) {\n                    radioInputs.forEach((radio) => {\n                        var _a, _b;\n                        if (radio instanceof HTMLInputElement) {\n                            const label = (_b = (_a = radio.parentElement) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim();\n                            if (label === value) {\n                                radio.click();\n                            }\n                        }\n                    });\n                    return;\n                }\n                // 文本输入\n                const textInput = question.querySelector('input[type=\"text\"], textarea');\n                if (textInput instanceof HTMLInputElement || textInput instanceof HTMLTextAreaElement) {\n                    textInput.value = value;\n                    textInput.dispatchEvent(new Event('input', { bubbles: true }));\n                    textInput.dispatchEvent(new Event('change', { bubbles: true }));\n                    return;\n                }\n                // 多选题\n                const checkboxInputs = question.querySelectorAll('input[type=\"checkbox\"]');\n                if (checkboxInputs.length > 0) {\n                    const values = value.split(',').map(v => v.trim());\n                    checkboxInputs.forEach((checkbox) => {\n                        var _a, _b;\n                        if (checkbox instanceof HTMLInputElement) {\n                            const label = (_b = (_a = checkbox.parentElement) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim();\n                            if (label && values.includes(label)) {\n                                checkbox.click();\n                            }\n                        }\n                    });\n                    return;\n                }\n                // 下拉选择\n                const select = question.querySelector('select');\n                if (select instanceof HTMLSelectElement) {\n                    const options = Array.from(select.options);\n                    const option = options.find(opt => opt.text.trim() === value);\n                    if (option) {\n                        select.value = option.value;\n                        select.dispatchEvent(new Event('change', { bubbles: true }));\n                    }\n                    return;\n                }\n            });\n            console.log('Form filled successfully');\n        }\n        catch (error) {\n            console.error('Error filling form:', error);\n        }\n    });\n}\n"],"names":[],"sourceRoot":""}